//
//  ViewController.swift
//  Guess Design
//
//  Created by Student on 2019-10-13.
//  Copyright © 2019 Student. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {
    
    // set flag for trial button
    var flag = true
    
    // result in percentage to find
    // the difference between user's slider value and Game's random number
    var result : Int = 0
    
    // contains random number generated by the Game
    var randomNumber : Int = 0
    
    // includes user's total score for all trials
    var totalScore = 0
    
    // includes user's current trial's score
    var currentScore = 0
    
    // counter for all availbale trials
    var trialCounter = 3
    
    // Array to hold difficulty level
    var pickerData: [String] = [String]()
    
    // setting initial difficulty level as Easy
    var currentDifficultylevel = "Easy"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        // Connect data:
        self.picker.delegate = self
        self.picker.dataSource = self
        totalScoreLbl.text = String(totalScore)
        
        // Input the data into the array
        pickerData = ["Easy", "Medium", "Hard"]
        
        tryBtn.isEnabled = true
        checkBtn.isEnabled = false
        picker.isUserInteractionEnabled = true
        
        selectRandom.isUserInteractionEnabled = false
        emoticonLbl.text = "😶"
        
    }
    // Game's Random Number Label
    @IBOutlet weak var randomNo: UILabel!
    
    @IBOutlet weak var totalScoreLbl: UILabel!
    
    @IBOutlet weak var currentScoreLbl: UILabel!
    
    @IBOutlet weak var emoticonLbl: UILabel!
    // Check button to set button property programattically
    @IBOutlet weak var checkBtn: UIButton!
    
    
    // Try button to set button property programattically
    @IBOutlet weak var tryBtn: UIButton!
    
    // Button to show availble trials to player
    @IBOutlet weak var trialBtn: UIButton!
    // Player can set Difficulty Level
    @IBOutlet weak var picker: UIPickerView!
    
    // Slider to be used by player to generate a number that can be matched with Game's random number
    @IBOutlet weak var selectRandom: UISlider!
    
    @IBOutlet weak var playerSelectionLbl: UILabel!
    // Set number of columns in picker view
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    // Set number of items in column
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return pickerData.count
    }
    
    // Set data for picker view
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return pickerData[row]
    }
    
    // When you select one string from picker view then you need to update relevant data
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        
        setDifficultyLevel(level: pickerData[row])
    }
    
    // Function to set difficulty level of slider for player based on his selection in picker
    func setDifficultyLevel(level: String) {
        currentDifficultylevel = level
        if(level == "Easy") {
            selectRandom.minimumValue = 0
            selectRandom.maximumValue = 100
        } else if(level == "Medium") {
            selectRandom.minimumValue = 0
            selectRandom.maximumValue = 150
        } else if(level == "Hard") {
            selectRandom.minimumValue = 0
            selectRandom.maximumValue = 200
        }
    }


    @IBAction func generateRandom(_ sender: UIButton) {
        
        setTrialBtnTitle()
        if (currentDifficultylevel == "Easy") {
            randomNo.text = String(Int.random(in: 1...100))
        } else if (currentDifficultylevel == "Medium") {
            randomNo.text = String(Int.random(in: 1...150))
        } else if (currentDifficultylevel == "Hard") {
            randomNo.text = String(Int.random(in: 1...200))
        }
        playerSelectionLbl.text = "0"
        tryBtn.isEnabled = false
        checkBtn.isEnabled = true
        picker.isUserInteractionEnabled = false
        selectRandom.isUserInteractionEnabled = true
    }
    @IBAction func resetGameData(_ sender: UIButton) {
        
        resetData()
        
    }
    
    func resetData() {
        
        currentScoreLbl.text = "0"
        currentScore = 0
        emoticonLbl.text = "😶"
        result = 0
        randomNumber = 0
        trialCounter = 3
        totalScoreLbl.text = "0"
        selectRandom.value = 0
        currentDifficultylevel = "Easy"
        totalScore = 0
        randomNo.text = "0"
        tryBtn.isEnabled = true
        checkBtn.isEnabled = false
        picker.isUserInteractionEnabled = true
        selectRandom.isUserInteractionEnabled = false
        currentDifficultylevel = "Easy"
        picker.selectRow(0, inComponent: 0, animated: true)
        playerSelectionLbl.text = "0"
        
    }
    @IBAction func checkPlayerInput(_ sender: UIButton) {
        if (trialCounter >= 1) {
            trialCounter -= 1
        }
        let playerSelection = Int(selectRandom.value)
        playerSelectionLbl.text = String(playerSelection)
        if let randomNumber = Int(randomNo.text!) {
            
            self.randomNumber = randomNumber
        }
        
        let result = calculateDifferencePercentage(randomNumber: self.randomNumber, valueNew: playerSelection)
        
        updateScoreInformation(result: result)
        
        
        
        selectRandom.isUserInteractionEnabled = false
        tryBtn.isEnabled = true
        checkBtn.isEnabled = false
        picker.isUserInteractionEnabled = true
    }
    
    func updateScoreInformation(result: Int) {
        if(result > 81 && result <= 100) {
            emoticonLbl.text = "😍"
            currentScore = 5
            updateTrialsCounter()
        } else if (result > 61 && result <= 80) {
            emoticonLbl.text = "🧐"
            currentScore = 4
            updateTrialsCounter()
        } else if (result > 41 && result <= 60) {
            emoticonLbl.text = "😳"
            currentScore = 3
        } else if (result > 21 && result <= 40) {
            emoticonLbl.text = "😥"
            currentScore = 2
        } else if (result >= 0 && result <= 20) {
            emoticonLbl.text = "😩"
            currentScore = 1
        }
        showAlert(trialsRemained: trialCounter)
        setTrialBtnTitle()
        currentScoreLbl.text = String(currentScore)
        totalScore += currentScore
        totalScoreLbl.text = String(totalScore)
    }
    func updateTrialsCounter() {
        if trialCounter < 3 {
            
            trialCounter += 1
            
        }
    }
    func showAlert(trialsRemained: Int) {
        if(trialsRemained == 0) {
            // Create the alert controller
            let alertController = UIAlertController(title: "Oops!!!", message: "You have exceeded all your trials. Select Ok to start Game again", preferredStyle: .alert)
            // Create the actions
            let okAction = UIAlertAction(title: "OK", style: UIAlertAction.Style.default) {
                
                
                UIAlertAction in
                NSLog("OK Pressed")
                self.resetData()
            }
            let cancelAction = UIAlertAction(title: "Cancel", style: UIAlertAction.Style.cancel) {
                UIAlertAction in
                NSLog("Cancel Pressed")
            }
            
            // Add the actions
            alertController.addAction(okAction)
            alertController.addAction(cancelAction)
            // Present the controller
            self.present(alertController, animated: true, completion: nil)
        }
    }
    func calculateDifferencePercentage(randomNumber: Int, valueNew: Int) -> Int {
        
        result = randomNumber > valueNew ? valueNew * 100 / randomNumber : randomNumber * 100 / valueNew
        return result
        
    }
    @IBAction func showAvailableTrials(_ sender: Any) {
        print(flag)
        setTrialBtnTitle()
    }
    
    func setTrialBtnTitle() {
        if flag {
            flag = false
            trialBtn.setTitle(String(trialCounter)+"/3", for: .normal)
        } else {
            flag = true
            trialBtn.setTitle("TRIALS", for: .normal)
        }
        
    }
    
}

